# Helper to calculate actual fib number
func calculate_fib(k) {
     checkif(k < 0) { throw 0; } # Or handle error
     checkif(k == 0){ throw 0; }
     recheck(k==1) { throw 1; }
     otherwise { throw calculate_fib(k-1) + calculate_fib(k-2); }
}

# Modified function to PRINT recursively in reverse
func print_fib_reverse(n) {
    checkif (n < 0) {
        # Stop recursion
        throw empty; 
    } otherwise {
        show(calculate_fib(n) + "\n"); # Print the nth value
        print_fib_reverse(n-1); # Recurse for the next lower value
    }
}

var n_limit = 13;
# Call it once, starting from the highest index
print_fib_reverse(n_limit - 1);
# Output for n_limit = 5: 3 2 1 1 0